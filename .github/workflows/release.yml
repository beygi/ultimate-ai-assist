# .github/workflows/release.yml

name: Build and Release Extension

# This workflow runs on every push to the 'master' branch.
on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    # Use the latest version of Ubuntu to run the job
    runs-on: ubuntu-latest

    # Define the permissions required by the job to create a release and write content.
    permissions:
      contents: write

    steps:
      # Step 1: Check out the repository's code
      # fetch-depth: 0 is required to fetch all history for all tags and branches.
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Determine the next version based on Conventional Commits
      # This action reads commit messages and the latest git tag to determine the next
      # semantic version, then creates and pushes a new git tag.
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: master
          # The default version bump will be a 'patch' if no other type is detected.
          default_bump: patch

      # Step 3: Set up pnpm
      - uses: pnpm/action-setup@v2
        with:
          version: 9

      # Step 4: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # Step 5: Install project dependencies
      - name: Install dependencies
        run: pnpm install

      # Step 6: Build the extensions for both browsers
      - name: Build extensions for Chrome and Firefox
        run: pnpm run build:firefox && pnpm run build:chrome

      # Step 7: Create ZIP archives for store submission
      # The version name is taken directly from the new tag created earlier.
      - name: Package Firefox extension
        run: |
          cd dist/firefox
          zip -r ../../firefox-ext-${{ steps.tag_version.outputs.new_tag }}.zip .
          cd ../../
      - name: Package Chrome extension
        run: |
          cd dist/chrome
          zip -r ../../chrome-ext-${{ steps.tag_version.outputs.new_tag }}.zip .
          cd ../..

      # Step 8: Create copies with official extensions for direct installation
      - name: Create official extension files
        run: |
          cp firefox-ext-${{ steps.tag_version.outputs.new_tag }}.zip firefox-ext-${{ steps.tag_version.outputs.new_tag }}.xpi
          cp chrome-ext-${{ steps.tag_version.outputs.new_tag }}.zip chrome-ext-${{ steps.tag_version.outputs.new_tag }}.crx

      # Step 9: Create a GitHub Release
      # This uses the tag and changelog generated by the github-tag-action.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          files: |
            firefox-ext-*.zip
            chrome-ext-*.zip
            firefox-ext-*.xpi
            chrome-ext-*.crx
